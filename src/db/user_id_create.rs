//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::{ActiveValue, DatabaseTransaction};
use sea_orm::entity::prelude::*;
use crate::cores::biz_code::{biz, BizCode, SERVER_ERROR};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "user_id_create"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub id: u64,
    pub tub: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Tub,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = u64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigUnsigned.def(),
            Self::Tub => ColumnType::TinyInteger.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}

pub async fn insert(db: &DatabaseTransaction) -> Result<u64, BizCode>{
    let m = ActiveModel{
        id: Default::default(),
        tub: ActiveValue::Set(1)
    };

    let r = Entity::insert(m).exec(db).await;

    match r {
        Ok(d) => {Ok(d.last_insert_id)}
        Err(e) => {Err(biz(SERVER_ERROR, &e.to_string()))}
    }
}
