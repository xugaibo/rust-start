//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::ActiveValue;
use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "article"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub id: u64,
    pub title: Option<String>,
    pub content: Option<String>,
    pub updated_by: String,
    pub created_by: String,
    pub updated_by_name: String,
    pub created_by_name: String,
    pub is_delete: i8,
    pub updated_at: DateTime,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Title,
    Content,
    UpdatedBy,
    CreatedBy,
    UpdatedByName,
    CreatedByName,
    IsDelete,
    UpdatedAt,
    CreatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = u64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigUnsigned.def(),
            Self::Title => ColumnType::String(Some(3000u32)).def(),
            Self::Content => ColumnType::Text.def().null(),
            Self::UpdatedBy => ColumnType::String(Some(64u32)).def(),
            Self::CreatedBy => ColumnType::String(Some(64u32)).def(),
            Self::UpdatedByName => ColumnType::String(Some(128u32)).def(),
            Self::CreatedByName => ColumnType::String(Some(128u32)).def(),
            Self::IsDelete => ColumnType::TinyInteger.def(),
            Self::UpdatedAt => ColumnType::DateTime.def(),
            Self::CreatedAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}


pub(crate) async fn insert(title: Option<String>, content: Option<String>, conn: &DatabaseConnection) -> Result<u64, DbErr> {
    let m = ActiveModel{
        id: Default::default(),
        title: ActiveValue::Set(title),
        content: ActiveValue::Set(content),
        updated_by: Default::default(),
        created_by: Default::default(),
        updated_by_name: Default::default(),
        created_by_name: Default::default(),
        is_delete: Default::default(),
        updated_at: Default::default(),
        created_at: Default::default()
    };

    let result = Entity::insert(m).exec(conn).await;
    match result {
        Ok(r) => {
            Ok(r.last_insert_id)
        },
        Err(e) => {
            Err(e)
        }
    }

}
