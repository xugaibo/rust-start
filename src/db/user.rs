//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "user"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub id: u64,
    pub user_id: i64,
    pub user_name: String,
    pub user_phone: String,
    pub password: String,
    pub updated_by: String,
    pub created_by: String,
    pub updated_by_name: String,
    pub created_by_name: String,
    pub is_delete: i8,
    pub updated_at: DateTime,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    UserId,
    UserName,
    UserPhone,
    Password,
    UpdatedBy,
    CreatedBy,
    UpdatedByName,
    CreatedByName,
    IsDelete,
    UpdatedAt,
    CreatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = u64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigUnsigned.def(),
            Self::UserId => ColumnType::BigInteger.def().unique(),
            Self::UserName => ColumnType::String(Some(100u32)).def().unique(),
            Self::UserPhone => ColumnType::String(Some(50u32)).def(),
            Self::Password => ColumnType::String(Some(200u32)).def(),
            Self::UpdatedBy => ColumnType::String(Some(64u32)).def(),
            Self::CreatedBy => ColumnType::String(Some(64u32)).def(),
            Self::UpdatedByName => ColumnType::String(Some(128u32)).def(),
            Self::CreatedByName => ColumnType::String(Some(128u32)).def(),
            Self::IsDelete => ColumnType::TinyInteger.def(),
            Self::UpdatedAt => ColumnType::DateTime.def(),
            Self::CreatedAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
