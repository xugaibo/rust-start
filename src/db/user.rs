//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::{ActiveValue, TransactionTrait};
use sea_orm::entity::prelude::*;
use crate::cores::biz_code::{biz, BizCode, CLIENT_ERROR, from_code, SERVER_ERROR};
use crate::cores::md5::{encode, verify};
use crate::db::user_id_create;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "user"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub id: u64,
    pub user_id: i64,
    pub user_name: Option<String>,
    pub user_phone: Option<String>,
    pub password: Option<String>,
    pub updated_by: Option<String>,
    pub created_by: Option<String>,
    pub updated_by_name: Option<String>,
    pub created_by_name: Option<String>,
    pub is_delete: i8,
    pub updated_at: DateTime,
    pub created_at: DateTime,
}

const SLOT: &str = "LOUFURJW";

impl Model {
    pub(crate) fn valid_password(&self, password: &str) -> bool {
        return verify(&(self.password.as_ref().unwrap()), password, SLOT);
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    UserId,
    UserName,
    UserPhone,
    Password,
    UpdatedBy,
    CreatedBy,
    UpdatedByName,
    CreatedByName,
    IsDelete,
    UpdatedAt,
    CreatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = u64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigUnsigned.def(),
            Self::UserId => ColumnType::BigInteger.def().unique(),
            Self::UserName => ColumnType::String(Some(100u32)).def().unique(),
            Self::UserPhone => ColumnType::String(Some(50u32)).def(),
            Self::Password => ColumnType::String(Some(200u32)).def(),
            Self::UpdatedBy => ColumnType::String(Some(64u32)).def(),
            Self::CreatedBy => ColumnType::String(Some(64u32)).def(),
            Self::UpdatedByName => ColumnType::String(Some(128u32)).def(),
            Self::CreatedByName => ColumnType::String(Some(128u32)).def(),
            Self::IsDelete => ColumnType::TinyInteger.def(),
            Self::UpdatedAt => ColumnType::DateTime.def(),
            Self::CreatedAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}

pub(crate) async fn get_by_name(user_name: Option<String>, db: &DatabaseConnection) -> Result<Option<Model>, BizCode> {
    if user_name.is_none() {
        return Ok(None);
    }

    let r = Entity::find().filter(Column::UserName.eq(user_name.unwrap())).one(db).await;
    if r.is_ok() {
        return Ok(r.ok().unwrap());
    }

    return Err(biz(SERVER_ERROR, &r.err().unwrap().to_string()));
}

fn encode_password(password: Option<String>) -> Option<String> {
    if password.is_none() {
        return None;
    }

    return Some(encode(&password.unwrap(), SLOT));
}

pub(crate) async fn insert(user_name: Option<String>, user_phone: Option<String>, password: Option<String>, db: &DatabaseConnection) -> Result<u64, BizCode> {
    let txn = db.begin().await;
    if txn.is_err() {
        return Err(biz(SERVER_ERROR, &txn.err().unwrap().to_string()));
    }

    let txn = txn.ok().unwrap();
    let user_id = user_id_create::insert(&txn).await?;
    if user_name.is_none() || password.is_none() {
        return Err(from_code(CLIENT_ERROR));
    }

    let user_phone_v;
    if user_phone.is_none() {
        user_phone_v = ActiveValue::NotSet;
    } else {
        user_phone_v = ActiveValue::set(user_phone);
    }

    let m = ActiveModel {
        id: Default::default(),
        user_id: ActiveValue::Set(user_id as i64),
        user_name: ActiveValue::set(user_name),
        user_phone: user_phone_v,
        password: ActiveValue::Set(encode_password(password)),
        updated_by: Default::default(),
        created_by: Default::default(),
        updated_by_name: Default::default(),
        created_by_name: Default::default(),
        is_delete: Default::default(),
        updated_at: Default::default(),
        created_at: Default::default(),
    };

    let r = Entity::insert(m).exec(&txn).await;
    let tx_result = txn.commit().await;
    if tx_result.is_err() {
        return Err(biz(SERVER_ERROR, &tx_result.err().unwrap().to_string()));
    }

    match r {
        Ok(d) => { Ok(d.last_insert_id) }
        Err(e) => {Err(biz(SERVER_ERROR, &e.to_string()))}
    }

}